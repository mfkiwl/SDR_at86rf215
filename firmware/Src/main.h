/* This file was automatically generated.  Do not edit! */
#ifndef __MAIN_H__
#define __MAIN_H__
void reset_channel_timeout(void);
void set_channel_timeout_zero(void);
void set_channel_timeout_min(void);
void scanner_next_channel(void);
float get_current_freq(void);
void process_incoming_rf(void);
int upsample_audio(uint8_t *buffer,int len);
#if defined(USE_FULL_ASSERT)
void assert_failed(uint8_t *file,uint32_t line);
#endif
void _Error_Handler(char *file,int line);
void calc_stddev(int16_t *data,int n);
int main(void);
float atan2f(float y,float x);
float get_real_amp(void);
extern float eqlms_dhat[1];
extern float eqlms_d[1];
extern float eqlms_mu;
extern float eqlms_beta;
extern unsigned int eqlms_m;
extern unsigned int eqlms_k;
extern struct eqlms_rf_s *eqlms;
extern struct freqmod_s *freqmod;
extern struct nco_cf_s *nco;
extern volatile int upsample_ready;
extern volatile short upsampled[160 *6];
extern struct resamp_rf_s *audio_resamp_q;
extern unsigned int audio_resamp_npfb;
extern float audio_resamp_bw;
extern float audio_resamp_As;
extern unsigned int audio_resamp_m;
extern float audio_resamp_r;
extern unsigned int ch_ny;
extern float complex ch_resamp_y[512];
extern float complex hb_samples2[256];
extern float complex hb_samples1[256];
extern struct resamp2_s *halfband_q;
extern float complex half_band_2x[2];
extern float complex half_band_x;
extern float half_band_as;
extern unsigned int half_band_m;
extern struct resamp_cf_s *ch_resamp_q;
extern unsigned int ch_resamp_npfb;
extern float ch_resamp_bw;
extern float ch_resamp_As;
extern unsigned int ch_resamp_m;
extern float ch_resamp_r;
extern struct symsync_s *q;
extern struct symsync_s symsync;
extern float symsync_buf_out[1];
extern float symsync_buf_in[1];
extern unsigned int symsync_npfb;
extern float symsync_beta;
extern unsigned int symsync_m;
extern unsigned int symsync_k;
extern int symsync_ftype;
extern unsigned int did_sym;
void tcp_iperf_init(void);
void MX_SPI3_Init(void);
void MX_SPI3_Init(void);
void SystemClock_Config(void);
void SystemClock_Config(void);
extern volatile int fm_cnt;
extern int eqlms_trained;
extern int do_silent_frame;
extern int audio_frames_done;
extern volatile struct udp_pcb *udp_data_pcb;
extern int64_t __errno;
extern volatile int scanner_mod;
extern int in_buffer_len;
extern char in_buffer_tmp[1500 *IN_BUFFER_N];
extern char in_buffer[1500 *IN_BUFFER_N];
extern int found_signal;
extern int sample_cnt;
extern volatile uint32_t uptime_sec;
extern uint32_t second_tick;
void main_tick(void);
void main_tick();
void led_tick(void);
void led_tick();
int _mem_free(void);
void udp_data_rx(void *arg,struct udp_pcb *pcb,struct pbuf *p,struct ip4_addr *addr,uint16_t port);
void udp_data_rx(void *arg,struct udp_pcb *pcb,struct pbuf *p,struct ip4_addr *addr,uint16_t port);
void p25_udp_init(void);
void p25_udp_init();
void udp_send_data(uint8_t *buffer,int len);
void udp_send_data(uint8_t *buffer,int len);
void process_incoming_samples(int16_t val);
void process_incoming_samples(int16_t val);
void p25_net_tick(void);
extern SPI_HandleTypeDef hspi3;
extern SD_HandleTypeDef hsd2;
extern ADC_HandleTypeDef hadc3;
extern ADC_HandleTypeDef hadc1;
extern UART_HandleTypeDef huart3;
extern volatile int did_print_channel;
extern volatile float scanner_freq_p25[];
extern volatile int scanner_channel_mask[];
extern volatile int scanner_freqs;
extern volatile int8_t std_dev;
extern volatile uint32_t scanner_idle_time;
extern volatile int scanner_channel;
extern volatile int channel_timeout;
extern int stddev_n;
extern float32_t stddev_out;
extern float32_t stddev_in[N_SAMPLES];
extern volatile int do_low_if_mix;
extern volatile int do_48khz_iq_only;
extern volatile int do_freq_offset;
extern volatile struct ip4_addr udp_saddr;
#endif
